// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AddFriendReq;
class AddFriendReqDefaultTypeInternal;
extern AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
class AddFriendRsp;
class AddFriendRspDefaultTypeInternal;
extern AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
class AuthFriendReq;
class AuthFriendReqDefaultTypeInternal;
extern AuthFriendReqDefaultTypeInternal _AuthFriendReq_default_instance_;
class AuthFriendRsp;
class AuthFriendRspDefaultTypeInternal;
extern AuthFriendRspDefaultTypeInternal _AuthFriendRsp_default_instance_;
class GetChatServerReq;
class GetChatServerReqDefaultTypeInternal;
extern GetChatServerReqDefaultTypeInternal _GetChatServerReq_default_instance_;
class GetChatServerRsp;
class GetChatServerRspDefaultTypeInternal;
extern GetChatServerRspDefaultTypeInternal _GetChatServerRsp_default_instance_;
class GetVarifyReq;
class GetVarifyReqDefaultTypeInternal;
extern GetVarifyReqDefaultTypeInternal _GetVarifyReq_default_instance_;
class GetVarifyRsp;
class GetVarifyRspDefaultTypeInternal;
extern GetVarifyRspDefaultTypeInternal _GetVarifyRsp_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class ReplyAddFriendReq;
class ReplyAddFriendReqDefaultTypeInternal;
extern ReplyAddFriendReqDefaultTypeInternal _ReplyAddFriendReq_default_instance_;
class ReplyAddFriendRsp;
class ReplyAddFriendRspDefaultTypeInternal;
extern ReplyAddFriendRspDefaultTypeInternal _ReplyAddFriendRsp_default_instance_;
class SendChatMessageReq;
class SendChatMessageReqDefaultTypeInternal;
extern SendChatMessageReqDefaultTypeInternal _SendChatMessageReq_default_instance_;
class SendChatMessageRsp;
class SendChatMessageRspDefaultTypeInternal;
extern SendChatMessageRspDefaultTypeInternal _SendChatMessageRsp_default_instance_;
class TextChatData;
class TextChatDataDefaultTypeInternal;
extern TextChatDataDefaultTypeInternal _TextChatData_default_instance_;
class TextChatMessageReq;
class TextChatMessageReqDefaultTypeInternal;
extern TextChatMessageReqDefaultTypeInternal _TextChatMessageReq_default_instance_;
class TextChatMessageRsp;
class TextChatMessageRspDefaultTypeInternal;
extern TextChatMessageRspDefaultTypeInternal _TextChatMessageRsp_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AddFriendReq* Arena::CreateMaybeMessage<::message::AddFriendReq>(Arena*);
template<> ::message::AddFriendRsp* Arena::CreateMaybeMessage<::message::AddFriendRsp>(Arena*);
template<> ::message::AuthFriendReq* Arena::CreateMaybeMessage<::message::AuthFriendReq>(Arena*);
template<> ::message::AuthFriendRsp* Arena::CreateMaybeMessage<::message::AuthFriendRsp>(Arena*);
template<> ::message::GetChatServerReq* Arena::CreateMaybeMessage<::message::GetChatServerReq>(Arena*);
template<> ::message::GetChatServerRsp* Arena::CreateMaybeMessage<::message::GetChatServerRsp>(Arena*);
template<> ::message::GetVarifyReq* Arena::CreateMaybeMessage<::message::GetVarifyReq>(Arena*);
template<> ::message::GetVarifyRsp* Arena::CreateMaybeMessage<::message::GetVarifyRsp>(Arena*);
template<> ::message::LoginReq* Arena::CreateMaybeMessage<::message::LoginReq>(Arena*);
template<> ::message::LoginRsp* Arena::CreateMaybeMessage<::message::LoginRsp>(Arena*);
template<> ::message::ReplyAddFriendReq* Arena::CreateMaybeMessage<::message::ReplyAddFriendReq>(Arena*);
template<> ::message::ReplyAddFriendRsp* Arena::CreateMaybeMessage<::message::ReplyAddFriendRsp>(Arena*);
template<> ::message::SendChatMessageReq* Arena::CreateMaybeMessage<::message::SendChatMessageReq>(Arena*);
template<> ::message::SendChatMessageRsp* Arena::CreateMaybeMessage<::message::SendChatMessageRsp>(Arena*);
template<> ::message::TextChatData* Arena::CreateMaybeMessage<::message::TextChatData>(Arena*);
template<> ::message::TextChatMessageReq* Arena::CreateMaybeMessage<::message::TextChatMessageReq>(Arena*);
template<> ::message::TextChatMessageRsp* Arena::CreateMaybeMessage<::message::TextChatMessageRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class GetVarifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVarifyReq) */ {
 public:
  inline GetVarifyReq() : GetVarifyReq(nullptr) {}
  virtual ~GetVarifyReq();

  GetVarifyReq(const GetVarifyReq& from);
  GetVarifyReq(GetVarifyReq&& from) noexcept
    : GetVarifyReq() {
    *this = ::std::move(from);
  }

  inline GetVarifyReq& operator=(const GetVarifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVarifyReq& operator=(GetVarifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVarifyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVarifyReq* internal_default_instance() {
    return reinterpret_cast<const GetVarifyReq*>(
               &_GetVarifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetVarifyReq& a, GetVarifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVarifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVarifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVarifyReq* New() const final {
    return CreateMaybeMessage<GetVarifyReq>(nullptr);
  }

  GetVarifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVarifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVarifyReq& from);
  void MergeFrom(const GetVarifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVarifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVarifyReq";
  }
  protected:
  explicit GetVarifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:message.GetVarifyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetVarifyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVarifyRsp) */ {
 public:
  inline GetVarifyRsp() : GetVarifyRsp(nullptr) {}
  virtual ~GetVarifyRsp();

  GetVarifyRsp(const GetVarifyRsp& from);
  GetVarifyRsp(GetVarifyRsp&& from) noexcept
    : GetVarifyRsp() {
    *this = ::std::move(from);
  }

  inline GetVarifyRsp& operator=(const GetVarifyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVarifyRsp& operator=(GetVarifyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVarifyRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVarifyRsp* internal_default_instance() {
    return reinterpret_cast<const GetVarifyRsp*>(
               &_GetVarifyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetVarifyRsp& a, GetVarifyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVarifyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVarifyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVarifyRsp* New() const final {
    return CreateMaybeMessage<GetVarifyRsp>(nullptr);
  }

  GetVarifyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVarifyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVarifyRsp& from);
  void MergeFrom(const GetVarifyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVarifyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVarifyRsp";
  }
  protected:
  explicit GetVarifyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kCodeFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetVarifyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetChatServerReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetChatServerReq) */ {
 public:
  inline GetChatServerReq() : GetChatServerReq(nullptr) {}
  virtual ~GetChatServerReq();

  GetChatServerReq(const GetChatServerReq& from);
  GetChatServerReq(GetChatServerReq&& from) noexcept
    : GetChatServerReq() {
    *this = ::std::move(from);
  }

  inline GetChatServerReq& operator=(const GetChatServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatServerReq& operator=(GetChatServerReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatServerReq* internal_default_instance() {
    return reinterpret_cast<const GetChatServerReq*>(
               &_GetChatServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetChatServerReq& a, GetChatServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatServerReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatServerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatServerReq* New() const final {
    return CreateMaybeMessage<GetChatServerReq>(nullptr);
  }

  GetChatServerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatServerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatServerReq& from);
  void MergeFrom(const GetChatServerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatServerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetChatServerReq";
  }
  protected:
  explicit GetChatServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetChatServerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetChatServerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetChatServerRsp) */ {
 public:
  inline GetChatServerRsp() : GetChatServerRsp(nullptr) {}
  virtual ~GetChatServerRsp();

  GetChatServerRsp(const GetChatServerRsp& from);
  GetChatServerRsp(GetChatServerRsp&& from) noexcept
    : GetChatServerRsp() {
    *this = ::std::move(from);
  }

  inline GetChatServerRsp& operator=(const GetChatServerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatServerRsp& operator=(GetChatServerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatServerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatServerRsp* internal_default_instance() {
    return reinterpret_cast<const GetChatServerRsp*>(
               &_GetChatServerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetChatServerRsp& a, GetChatServerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatServerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatServerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatServerRsp* New() const final {
    return CreateMaybeMessage<GetChatServerRsp>(nullptr);
  }

  GetChatServerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatServerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatServerRsp& from);
  void MergeFrom(const GetChatServerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatServerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetChatServerRsp";
  }
  protected:
  explicit GetChatServerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kPortFieldNumber = 3,
    kTokenFieldNumber = 4,
    kErrorFieldNumber = 1,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.GetChatServerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.LoginRsp) */ {
 public:
  inline LoginRsp() : LoginRsp(nullptr) {}
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(nullptr);
  }

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.LoginRsp";
  }
  protected:
  explicit LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.LoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddFriendReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AddFriendReq) */ {
 public:
  inline AddFriendReq() : AddFriendReq(nullptr) {}
  virtual ~AddFriendReq();

  AddFriendReq(const AddFriendReq& from);
  AddFriendReq(AddFriendReq&& from) noexcept
    : AddFriendReq() {
    *this = ::std::move(from);
  }

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendReq& operator=(AddFriendReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendReq* internal_default_instance() {
    return reinterpret_cast<const AddFriendReq*>(
               &_AddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddFriendReq& a, AddFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriendReq* New() const final {
    return CreateMaybeMessage<AddFriendReq>(nullptr);
  }

  AddFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriendReq& from);
  void MergeFrom(const AddFriendReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AddFriendReq";
  }
  protected:
  explicit AddFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kUidFieldNumber = 1,
    kTouidFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 4;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.AddFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AddFriendRsp) */ {
 public:
  inline AddFriendRsp() : AddFriendRsp(nullptr) {}
  virtual ~AddFriendRsp();

  AddFriendRsp(const AddFriendRsp& from);
  AddFriendRsp(AddFriendRsp&& from) noexcept
    : AddFriendRsp() {
    *this = ::std::move(from);
  }

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRsp& operator=(AddFriendRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriendRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AddFriendRsp*>(
               &_AddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddFriendRsp& a, AddFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriendRsp* New() const final {
    return CreateMaybeMessage<AddFriendRsp>(nullptr);
  }

  AddFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriendRsp& from);
  void MergeFrom(const AddFriendRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AddFriendRsp";
  }
  protected:
  explicit AddFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 3;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.AddFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ReplyAddFriendReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ReplyAddFriendReq) */ {
 public:
  inline ReplyAddFriendReq() : ReplyAddFriendReq(nullptr) {}
  virtual ~ReplyAddFriendReq();

  ReplyAddFriendReq(const ReplyAddFriendReq& from);
  ReplyAddFriendReq(ReplyAddFriendReq&& from) noexcept
    : ReplyAddFriendReq() {
    *this = ::std::move(from);
  }

  inline ReplyAddFriendReq& operator=(const ReplyAddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyAddFriendReq& operator=(ReplyAddFriendReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyAddFriendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyAddFriendReq* internal_default_instance() {
    return reinterpret_cast<const ReplyAddFriendReq*>(
               &_ReplyAddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReplyAddFriendReq& a, ReplyAddFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyAddFriendReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyAddFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyAddFriendReq* New() const final {
    return CreateMaybeMessage<ReplyAddFriendReq>(nullptr);
  }

  ReplyAddFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyAddFriendReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyAddFriendReq& from);
  void MergeFrom(const ReplyAddFriendReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyAddFriendReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ReplyAddFriendReq";
  }
  protected:
  explicit ReplyAddFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kAgreeFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool agree = 2;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // int32 touid = 3;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.ReplyAddFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool agree_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ReplyAddFriendRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ReplyAddFriendRsp) */ {
 public:
  inline ReplyAddFriendRsp() : ReplyAddFriendRsp(nullptr) {}
  virtual ~ReplyAddFriendRsp();

  ReplyAddFriendRsp(const ReplyAddFriendRsp& from);
  ReplyAddFriendRsp(ReplyAddFriendRsp&& from) noexcept
    : ReplyAddFriendRsp() {
    *this = ::std::move(from);
  }

  inline ReplyAddFriendRsp& operator=(const ReplyAddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyAddFriendRsp& operator=(ReplyAddFriendRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyAddFriendRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyAddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const ReplyAddFriendRsp*>(
               &_ReplyAddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReplyAddFriendRsp& a, ReplyAddFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyAddFriendRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyAddFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyAddFriendRsp* New() const final {
    return CreateMaybeMessage<ReplyAddFriendRsp>(nullptr);
  }

  ReplyAddFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyAddFriendRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyAddFriendRsp& from);
  void MergeFrom(const ReplyAddFriendRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyAddFriendRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ReplyAddFriendRsp";
  }
  protected:
  explicit ReplyAddFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 3;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.ReplyAddFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendChatMessageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SendChatMessageReq) */ {
 public:
  inline SendChatMessageReq() : SendChatMessageReq(nullptr) {}
  virtual ~SendChatMessageReq();

  SendChatMessageReq(const SendChatMessageReq& from);
  SendChatMessageReq(SendChatMessageReq&& from) noexcept
    : SendChatMessageReq() {
    *this = ::std::move(from);
  }

  inline SendChatMessageReq& operator=(const SendChatMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatMessageReq& operator=(SendChatMessageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendChatMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendChatMessageReq* internal_default_instance() {
    return reinterpret_cast<const SendChatMessageReq*>(
               &_SendChatMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendChatMessageReq& a, SendChatMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatMessageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendChatMessageReq* New() const final {
    return CreateMaybeMessage<SendChatMessageReq>(nullptr);
  }

  SendChatMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendChatMessageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendChatMessageReq& from);
  void MergeFrom(const SendChatMessageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMessageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SendChatMessageReq";
  }
  protected:
  explicit SendChatMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kUidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 2;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.SendChatMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SendChatMessageRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SendChatMessageRsp) */ {
 public:
  inline SendChatMessageRsp() : SendChatMessageRsp(nullptr) {}
  virtual ~SendChatMessageRsp();

  SendChatMessageRsp(const SendChatMessageRsp& from);
  SendChatMessageRsp(SendChatMessageRsp&& from) noexcept
    : SendChatMessageRsp() {
    *this = ::std::move(from);
  }

  inline SendChatMessageRsp& operator=(const SendChatMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatMessageRsp& operator=(SendChatMessageRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendChatMessageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendChatMessageRsp* internal_default_instance() {
    return reinterpret_cast<const SendChatMessageRsp*>(
               &_SendChatMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendChatMessageRsp& a, SendChatMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatMessageRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendChatMessageRsp* New() const final {
    return CreateMaybeMessage<SendChatMessageRsp>(nullptr);
  }

  SendChatMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendChatMessageRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendChatMessageRsp& from);
  void MergeFrom(const SendChatMessageRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMessageRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SendChatMessageRsp";
  }
  protected:
  explicit SendChatMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 3;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.SendChatMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AuthFriendReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AuthFriendReq) */ {
 public:
  inline AuthFriendReq() : AuthFriendReq(nullptr) {}
  virtual ~AuthFriendReq();

  AuthFriendReq(const AuthFriendReq& from);
  AuthFriendReq(AuthFriendReq&& from) noexcept
    : AuthFriendReq() {
    *this = ::std::move(from);
  }

  inline AuthFriendReq& operator=(const AuthFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthFriendReq& operator=(AuthFriendReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthFriendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthFriendReq* internal_default_instance() {
    return reinterpret_cast<const AuthFriendReq*>(
               &_AuthFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AuthFriendReq& a, AuthFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthFriendReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthFriendReq* New() const final {
    return CreateMaybeMessage<AuthFriendReq>(nullptr);
  }

  AuthFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthFriendReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthFriendReq& from);
  void MergeFrom(const AuthFriendReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthFriendReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AuthFriendReq";
  }
  protected:
  explicit AuthFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 2;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.AuthFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AuthFriendRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AuthFriendRsp) */ {
 public:
  inline AuthFriendRsp() : AuthFriendRsp(nullptr) {}
  virtual ~AuthFriendRsp();

  AuthFriendRsp(const AuthFriendRsp& from);
  AuthFriendRsp(AuthFriendRsp&& from) noexcept
    : AuthFriendRsp() {
    *this = ::std::move(from);
  }

  inline AuthFriendRsp& operator=(const AuthFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthFriendRsp& operator=(AuthFriendRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthFriendRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AuthFriendRsp*>(
               &_AuthFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AuthFriendRsp& a, AuthFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthFriendRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthFriendRsp* New() const final {
    return CreateMaybeMessage<AuthFriendRsp>(nullptr);
  }

  AuthFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthFriendRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthFriendRsp& from);
  void MergeFrom(const AuthFriendRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthFriendRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AuthFriendRsp";
  }
  protected:
  explicit AuthFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 3;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.AuthFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TextChatData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.TextChatData) */ {
 public:
  inline TextChatData() : TextChatData(nullptr) {}
  virtual ~TextChatData();

  TextChatData(const TextChatData& from);
  TextChatData(TextChatData&& from) noexcept
    : TextChatData() {
    *this = ::std::move(from);
  }

  inline TextChatData& operator=(const TextChatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatData& operator=(TextChatData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextChatData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextChatData* internal_default_instance() {
    return reinterpret_cast<const TextChatData*>(
               &_TextChatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TextChatData& a, TextChatData& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextChatData* New() const final {
    return CreateMaybeMessage<TextChatData>(nullptr);
  }

  TextChatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextChatData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextChatData& from);
  void MergeFrom(const TextChatData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.TextChatData";
  }
  protected:
  explicit TextChatData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgidFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string msgid = 1;
  void clear_msgid();
  const std::string& msgid() const;
  void set_msgid(const std::string& value);
  void set_msgid(std::string&& value);
  void set_msgid(const char* value);
  void set_msgid(const char* value, size_t size);
  std::string* mutable_msgid();
  std::string* release_msgid();
  void set_allocated_msgid(std::string* msgid);
  private:
  const std::string& _internal_msgid() const;
  void _internal_set_msgid(const std::string& value);
  std::string* _internal_mutable_msgid();
  public:

  // int32 data = 2;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.TextChatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgid_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TextChatMessageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.TextChatMessageReq) */ {
 public:
  inline TextChatMessageReq() : TextChatMessageReq(nullptr) {}
  virtual ~TextChatMessageReq();

  TextChatMessageReq(const TextChatMessageReq& from);
  TextChatMessageReq(TextChatMessageReq&& from) noexcept
    : TextChatMessageReq() {
    *this = ::std::move(from);
  }

  inline TextChatMessageReq& operator=(const TextChatMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMessageReq& operator=(TextChatMessageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextChatMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextChatMessageReq* internal_default_instance() {
    return reinterpret_cast<const TextChatMessageReq*>(
               &_TextChatMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TextChatMessageReq& a, TextChatMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatMessageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextChatMessageReq* New() const final {
    return CreateMaybeMessage<TextChatMessageReq>(nullptr);
  }

  TextChatMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextChatMessageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextChatMessageReq& from);
  void MergeFrom(const TextChatMessageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatMessageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.TextChatMessageReq";
  }
  protected:
  explicit TextChatMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kUidFieldNumber = 1,
    kTouidFieldNumber = 2,
  };
  // repeated .message.TextChatData message = 3;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::message::TextChatData* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
      mutable_message();
  private:
  const ::message::TextChatData& _internal_message(int index) const;
  ::message::TextChatData* _internal_add_message();
  public:
  const ::message::TextChatData& message(int index) const;
  ::message::TextChatData* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
      message() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 2;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.TextChatMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData > message_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TextChatMessageRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.TextChatMessageRsp) */ {
 public:
  inline TextChatMessageRsp() : TextChatMessageRsp(nullptr) {}
  virtual ~TextChatMessageRsp();

  TextChatMessageRsp(const TextChatMessageRsp& from);
  TextChatMessageRsp(TextChatMessageRsp&& from) noexcept
    : TextChatMessageRsp() {
    *this = ::std::move(from);
  }

  inline TextChatMessageRsp& operator=(const TextChatMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMessageRsp& operator=(TextChatMessageRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextChatMessageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextChatMessageRsp* internal_default_instance() {
    return reinterpret_cast<const TextChatMessageRsp*>(
               &_TextChatMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TextChatMessageRsp& a, TextChatMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatMessageRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextChatMessageRsp* New() const final {
    return CreateMaybeMessage<TextChatMessageRsp>(nullptr);
  }

  TextChatMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextChatMessageRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextChatMessageRsp& from);
  void MergeFrom(const TextChatMessageRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextChatMessageRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.TextChatMessageRsp";
  }
  protected:
  explicit TextChatMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kErrorFieldNumber = 1,
    kUidFieldNumber = 2,
    kTouidFieldNumber = 3,
  };
  // repeated .message.TextChatData message = 4;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::message::TextChatData* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
      mutable_message();
  private:
  const ::message::TextChatData& _internal_message(int index) const;
  ::message::TextChatData* _internal_add_message();
  public:
  const ::message::TextChatData& message(int index) const;
  ::message::TextChatData* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
      message() const;

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 touid = 3;
  void clear_touid();
  ::PROTOBUF_NAMESPACE_ID::int32 touid() const;
  void set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_touid() const;
  void _internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.TextChatMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData > message_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 touid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVarifyReq

// string email = 1;
inline void GetVarifyReq::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVarifyReq::email() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyReq.email)
  return _internal_email();
}
inline void GetVarifyReq::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:message.GetVarifyReq.email)
}
inline std::string* GetVarifyReq::mutable_email() {
  // @@protoc_insertion_point(field_mutable:message.GetVarifyReq.email)
  return _internal_mutable_email();
}
inline const std::string& GetVarifyReq::_internal_email() const {
  return email_.Get();
}
inline void GetVarifyReq::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVarifyReq::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetVarifyReq.email)
}
inline void GetVarifyReq::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetVarifyReq.email)
}
inline void GetVarifyReq::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetVarifyReq.email)
}
inline std::string* GetVarifyReq::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVarifyReq::release_email() {
  // @@protoc_insertion_point(field_release:message.GetVarifyReq.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVarifyReq::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetVarifyReq.email)
}

// -------------------------------------------------------------------

// GetVarifyRsp

// int32 error = 1;
inline void GetVarifyRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVarifyRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVarifyRsp::error() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyRsp.error)
  return _internal_error();
}
inline void GetVarifyRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void GetVarifyRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetVarifyRsp.error)
}

// string email = 2;
inline void GetVarifyRsp::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVarifyRsp::email() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyRsp.email)
  return _internal_email();
}
inline void GetVarifyRsp::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:message.GetVarifyRsp.email)
}
inline std::string* GetVarifyRsp::mutable_email() {
  // @@protoc_insertion_point(field_mutable:message.GetVarifyRsp.email)
  return _internal_mutable_email();
}
inline const std::string& GetVarifyRsp::_internal_email() const {
  return email_.Get();
}
inline void GetVarifyRsp::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVarifyRsp::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetVarifyRsp.email)
}
inline void GetVarifyRsp::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetVarifyRsp.email)
}
inline void GetVarifyRsp::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetVarifyRsp.email)
}
inline std::string* GetVarifyRsp::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVarifyRsp::release_email() {
  // @@protoc_insertion_point(field_release:message.GetVarifyRsp.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVarifyRsp::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetVarifyRsp.email)
}

// string code = 3;
inline void GetVarifyRsp::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVarifyRsp::code() const {
  // @@protoc_insertion_point(field_get:message.GetVarifyRsp.code)
  return _internal_code();
}
inline void GetVarifyRsp::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:message.GetVarifyRsp.code)
}
inline std::string* GetVarifyRsp::mutable_code() {
  // @@protoc_insertion_point(field_mutable:message.GetVarifyRsp.code)
  return _internal_mutable_code();
}
inline const std::string& GetVarifyRsp::_internal_code() const {
  return code_.Get();
}
inline void GetVarifyRsp::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVarifyRsp::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetVarifyRsp.code)
}
inline void GetVarifyRsp::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetVarifyRsp.code)
}
inline void GetVarifyRsp::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetVarifyRsp.code)
}
inline std::string* GetVarifyRsp::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVarifyRsp::release_code() {
  // @@protoc_insertion_point(field_release:message.GetVarifyRsp.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVarifyRsp::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetVarifyRsp.code)
}

// -------------------------------------------------------------------

// GetChatServerReq

// int32 uid = 1;
inline void GetChatServerReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChatServerReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChatServerReq::uid() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerReq.uid)
  return _internal_uid();
}
inline void GetChatServerReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetChatServerReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerReq.uid)
}

// -------------------------------------------------------------------

// GetChatServerRsp

// int32 error = 1;
inline void GetChatServerRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChatServerRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChatServerRsp::error() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.error)
  return _internal_error();
}
inline void GetChatServerRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void GetChatServerRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.error)
}

// string host = 2;
inline void GetChatServerRsp::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatServerRsp::host() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.host)
  return _internal_host();
}
inline void GetChatServerRsp::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.host)
}
inline std::string* GetChatServerRsp::mutable_host() {
  // @@protoc_insertion_point(field_mutable:message.GetChatServerRsp.host)
  return _internal_mutable_host();
}
inline const std::string& GetChatServerRsp::_internal_host() const {
  return host_.Get();
}
inline void GetChatServerRsp::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatServerRsp::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetChatServerRsp.host)
}
inline void GetChatServerRsp::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetChatServerRsp.host)
}
inline void GetChatServerRsp::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetChatServerRsp.host)
}
inline std::string* GetChatServerRsp::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatServerRsp::release_host() {
  // @@protoc_insertion_point(field_release:message.GetChatServerRsp.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatServerRsp::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetChatServerRsp.host)
}

// string port = 3;
inline void GetChatServerRsp::clear_port() {
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatServerRsp::port() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.port)
  return _internal_port();
}
inline void GetChatServerRsp::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.port)
}
inline std::string* GetChatServerRsp::mutable_port() {
  // @@protoc_insertion_point(field_mutable:message.GetChatServerRsp.port)
  return _internal_mutable_port();
}
inline const std::string& GetChatServerRsp::_internal_port() const {
  return port_.Get();
}
inline void GetChatServerRsp::_internal_set_port(const std::string& value) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatServerRsp::set_port(std::string&& value) {
  
  port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetChatServerRsp.port)
}
inline void GetChatServerRsp::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetChatServerRsp.port)
}
inline void GetChatServerRsp::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetChatServerRsp.port)
}
inline std::string* GetChatServerRsp::_internal_mutable_port() {
  
  return port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatServerRsp::release_port() {
  // @@protoc_insertion_point(field_release:message.GetChatServerRsp.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatServerRsp::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetChatServerRsp.port)
}

// string token = 4;
inline void GetChatServerRsp::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetChatServerRsp::token() const {
  // @@protoc_insertion_point(field_get:message.GetChatServerRsp.token)
  return _internal_token();
}
inline void GetChatServerRsp::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:message.GetChatServerRsp.token)
}
inline std::string* GetChatServerRsp::mutable_token() {
  // @@protoc_insertion_point(field_mutable:message.GetChatServerRsp.token)
  return _internal_mutable_token();
}
inline const std::string& GetChatServerRsp::_internal_token() const {
  return token_.Get();
}
inline void GetChatServerRsp::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetChatServerRsp::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetChatServerRsp.token)
}
inline void GetChatServerRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetChatServerRsp.token)
}
inline void GetChatServerRsp::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetChatServerRsp.token)
}
inline std::string* GetChatServerRsp::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetChatServerRsp::release_token() {
  // @@protoc_insertion_point(field_release:message.GetChatServerRsp.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetChatServerRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetChatServerRsp.token)
}

// -------------------------------------------------------------------

// LoginReq

// int32 uid = 1;
inline void LoginReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::uid() const {
  // @@protoc_insertion_point(field_get:message.LoginReq.uid)
  return _internal_uid();
}
inline void LoginReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void LoginReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.LoginReq.uid)
}

// string token = 2;
inline void LoginReq::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginReq::token() const {
  // @@protoc_insertion_point(field_get:message.LoginReq.token)
  return _internal_token();
}
inline void LoginReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:message.LoginReq.token)
}
inline std::string* LoginReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:message.LoginReq.token)
  return _internal_mutable_token();
}
inline const std::string& LoginReq::_internal_token() const {
  return token_.Get();
}
inline void LoginReq::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginReq::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.LoginReq.token)
}
inline void LoginReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.LoginReq.token)
}
inline void LoginReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.LoginReq.token)
}
inline std::string* LoginReq::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:message.LoginReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.LoginReq.token)
}

// -------------------------------------------------------------------

// LoginRsp

// int32 error = 1;
inline void LoginRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::error() const {
  // @@protoc_insertion_point(field_get:message.LoginRsp.error)
  return _internal_error();
}
inline void LoginRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void LoginRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.LoginRsp.error)
}

// int32 uid = 2;
inline void LoginRsp::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.LoginRsp.uid)
  return _internal_uid();
}
inline void LoginRsp::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void LoginRsp::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.LoginRsp.uid)
}

// string token = 3;
inline void LoginRsp::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRsp::token() const {
  // @@protoc_insertion_point(field_get:message.LoginRsp.token)
  return _internal_token();
}
inline void LoginRsp::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:message.LoginRsp.token)
}
inline std::string* LoginRsp::mutable_token() {
  // @@protoc_insertion_point(field_mutable:message.LoginRsp.token)
  return _internal_mutable_token();
}
inline const std::string& LoginRsp::_internal_token() const {
  return token_.Get();
}
inline void LoginRsp::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRsp::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.LoginRsp.token)
}
inline void LoginRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.LoginRsp.token)
}
inline void LoginRsp::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.LoginRsp.token)
}
inline std::string* LoginRsp::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRsp::release_token() {
  // @@protoc_insertion_point(field_release:message.LoginRsp.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.LoginRsp.token)
}

// -------------------------------------------------------------------

// AddFriendReq

// int32 uid = 1;
inline void AddFriendReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendReq::uid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.uid)
  return _internal_uid();
}
inline void AddFriendReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AddFriendReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendReq.uid)
}

// string name = 2;
inline void AddFriendReq::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddFriendReq::name() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.name)
  return _internal_name();
}
inline void AddFriendReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:message.AddFriendReq.name)
}
inline std::string* AddFriendReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:message.AddFriendReq.name)
  return _internal_mutable_name();
}
inline const std::string& AddFriendReq::_internal_name() const {
  return name_.Get();
}
inline void AddFriendReq::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddFriendReq::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.AddFriendReq.name)
}
inline void AddFriendReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.AddFriendReq.name)
}
inline void AddFriendReq::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.AddFriendReq.name)
}
inline std::string* AddFriendReq::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddFriendReq::release_name() {
  // @@protoc_insertion_point(field_release:message.AddFriendReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddFriendReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.AddFriendReq.name)
}

// string desc = 3;
inline void AddFriendReq::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddFriendReq::desc() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.desc)
  return _internal_desc();
}
inline void AddFriendReq::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:message.AddFriendReq.desc)
}
inline std::string* AddFriendReq::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:message.AddFriendReq.desc)
  return _internal_mutable_desc();
}
inline const std::string& AddFriendReq::_internal_desc() const {
  return desc_.Get();
}
inline void AddFriendReq::_internal_set_desc(const std::string& value) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddFriendReq::set_desc(std::string&& value) {
  
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.AddFriendReq.desc)
}
inline void AddFriendReq::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.AddFriendReq.desc)
}
inline void AddFriendReq::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.AddFriendReq.desc)
}
inline std::string* AddFriendReq::_internal_mutable_desc() {
  
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddFriendReq::release_desc() {
  // @@protoc_insertion_point(field_release:message.AddFriendReq.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddFriendReq::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.AddFriendReq.desc)
}

// int32 touid = 4;
inline void AddFriendReq::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendReq::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendReq.touid)
  return _internal_touid();
}
inline void AddFriendReq::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void AddFriendReq::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendReq.touid)
}

// -------------------------------------------------------------------

// AddFriendRsp

// int32 error = 1;
inline void AddFriendRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:message.AddFriendRsp.error)
  return _internal_error();
}
inline void AddFriendRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void AddFriendRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.AddFriendRsp.error)
}

// int32 uid = 2;
inline void AddFriendRsp::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRsp::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendRsp.uid)
  return _internal_uid();
}
inline void AddFriendRsp::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AddFriendRsp::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendRsp.uid)
}

// int32 touid = 3;
inline void AddFriendRsp::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRsp::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.AddFriendRsp.touid)
  return _internal_touid();
}
inline void AddFriendRsp::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void AddFriendRsp::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AddFriendRsp.touid)
}

// -------------------------------------------------------------------

// ReplyAddFriendReq

// int32 uid = 1;
inline void ReplyAddFriendReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendReq::uid() const {
  // @@protoc_insertion_point(field_get:message.ReplyAddFriendReq.uid)
  return _internal_uid();
}
inline void ReplyAddFriendReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void ReplyAddFriendReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.ReplyAddFriendReq.uid)
}

// bool agree = 2;
inline void ReplyAddFriendReq::clear_agree() {
  agree_ = false;
}
inline bool ReplyAddFriendReq::_internal_agree() const {
  return agree_;
}
inline bool ReplyAddFriendReq::agree() const {
  // @@protoc_insertion_point(field_get:message.ReplyAddFriendReq.agree)
  return _internal_agree();
}
inline void ReplyAddFriendReq::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void ReplyAddFriendReq::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:message.ReplyAddFriendReq.agree)
}

// int32 touid = 3;
inline void ReplyAddFriendReq::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendReq::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:message.ReplyAddFriendReq.touid)
  return _internal_touid();
}
inline void ReplyAddFriendReq::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void ReplyAddFriendReq::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.ReplyAddFriendReq.touid)
}

// -------------------------------------------------------------------

// ReplyAddFriendRsp

// int32 error = 1;
inline void ReplyAddFriendRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:message.ReplyAddFriendRsp.error)
  return _internal_error();
}
inline void ReplyAddFriendRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void ReplyAddFriendRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.ReplyAddFriendRsp.error)
}

// int32 uid = 2;
inline void ReplyAddFriendRsp::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendRsp::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.ReplyAddFriendRsp.uid)
  return _internal_uid();
}
inline void ReplyAddFriendRsp::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void ReplyAddFriendRsp::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.ReplyAddFriendRsp.uid)
}

// int32 touid = 3;
inline void ReplyAddFriendRsp::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendRsp::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplyAddFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.ReplyAddFriendRsp.touid)
  return _internal_touid();
}
inline void ReplyAddFriendRsp::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void ReplyAddFriendRsp::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.ReplyAddFriendRsp.touid)
}

// -------------------------------------------------------------------

// SendChatMessageReq

// int32 uid = 1;
inline void SendChatMessageReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageReq::uid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMessageReq.uid)
  return _internal_uid();
}
inline void SendChatMessageReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SendChatMessageReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMessageReq.uid)
}

// int32 touid = 2;
inline void SendChatMessageReq::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageReq::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageReq::touid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMessageReq.touid)
  return _internal_touid();
}
inline void SendChatMessageReq::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void SendChatMessageReq::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMessageReq.touid)
}

// string message = 3;
inline void SendChatMessageReq::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendChatMessageReq::message() const {
  // @@protoc_insertion_point(field_get:message.SendChatMessageReq.message)
  return _internal_message();
}
inline void SendChatMessageReq::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:message.SendChatMessageReq.message)
}
inline std::string* SendChatMessageReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable:message.SendChatMessageReq.message)
  return _internal_mutable_message();
}
inline const std::string& SendChatMessageReq::_internal_message() const {
  return message_.Get();
}
inline void SendChatMessageReq::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendChatMessageReq::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.SendChatMessageReq.message)
}
inline void SendChatMessageReq::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.SendChatMessageReq.message)
}
inline void SendChatMessageReq::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.SendChatMessageReq.message)
}
inline std::string* SendChatMessageReq::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendChatMessageReq::release_message() {
  // @@protoc_insertion_point(field_release:message.SendChatMessageReq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendChatMessageReq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.SendChatMessageReq.message)
}

// -------------------------------------------------------------------

// SendChatMessageRsp

// int32 error = 1;
inline void SendChatMessageRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageRsp::error() const {
  // @@protoc_insertion_point(field_get:message.SendChatMessageRsp.error)
  return _internal_error();
}
inline void SendChatMessageRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void SendChatMessageRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.SendChatMessageRsp.error)
}

// int32 uid = 2;
inline void SendChatMessageRsp::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageRsp::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMessageRsp.uid)
  return _internal_uid();
}
inline void SendChatMessageRsp::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SendChatMessageRsp::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMessageRsp.uid)
}

// int32 touid = 3;
inline void SendChatMessageRsp::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageRsp::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendChatMessageRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.SendChatMessageRsp.touid)
  return _internal_touid();
}
inline void SendChatMessageRsp::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void SendChatMessageRsp::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.SendChatMessageRsp.touid)
}

// -------------------------------------------------------------------

// AuthFriendReq

// int32 uid = 1;
inline void AuthFriendReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendReq::uid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendReq.uid)
  return _internal_uid();
}
inline void AuthFriendReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AuthFriendReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendReq.uid)
}

// int32 touid = 2;
inline void AuthFriendReq::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendReq::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendReq::touid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendReq.touid)
  return _internal_touid();
}
inline void AuthFriendReq::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void AuthFriendReq::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendReq.touid)
}

// -------------------------------------------------------------------

// AuthFriendRsp

// int32 error = 1;
inline void AuthFriendRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendRsp::error() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendRsp.error)
  return _internal_error();
}
inline void AuthFriendRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void AuthFriendRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendRsp.error)
}

// int32 uid = 2;
inline void AuthFriendRsp::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendRsp::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendRsp.uid)
  return _internal_uid();
}
inline void AuthFriendRsp::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AuthFriendRsp::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendRsp.uid)
}

// int32 touid = 3;
inline void AuthFriendRsp::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendRsp::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthFriendRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.AuthFriendRsp.touid)
  return _internal_touid();
}
inline void AuthFriendRsp::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void AuthFriendRsp::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.AuthFriendRsp.touid)
}

// -------------------------------------------------------------------

// TextChatData

// string msgid = 1;
inline void TextChatData::clear_msgid() {
  msgid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextChatData::msgid() const {
  // @@protoc_insertion_point(field_get:message.TextChatData.msgid)
  return _internal_msgid();
}
inline void TextChatData::set_msgid(const std::string& value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:message.TextChatData.msgid)
}
inline std::string* TextChatData::mutable_msgid() {
  // @@protoc_insertion_point(field_mutable:message.TextChatData.msgid)
  return _internal_mutable_msgid();
}
inline const std::string& TextChatData::_internal_msgid() const {
  return msgid_.Get();
}
inline void TextChatData::_internal_set_msgid(const std::string& value) {
  
  msgid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextChatData::set_msgid(std::string&& value) {
  
  msgid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.TextChatData.msgid)
}
inline void TextChatData::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msgid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.TextChatData.msgid)
}
inline void TextChatData::set_msgid(const char* value,
    size_t size) {
  
  msgid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.TextChatData.msgid)
}
inline std::string* TextChatData::_internal_mutable_msgid() {
  
  return msgid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextChatData::release_msgid() {
  // @@protoc_insertion_point(field_release:message.TextChatData.msgid)
  return msgid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextChatData::set_allocated_msgid(std::string* msgid) {
  if (msgid != nullptr) {
    
  } else {
    
  }
  msgid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.TextChatData.msgid)
}

// int32 data = 2;
inline void TextChatData::clear_data() {
  data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatData::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatData::data() const {
  // @@protoc_insertion_point(field_get:message.TextChatData.data)
  return _internal_data();
}
inline void TextChatData::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_ = value;
}
inline void TextChatData::set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:message.TextChatData.data)
}

// -------------------------------------------------------------------

// TextChatMessageReq

// int32 uid = 1;
inline void TextChatMessageReq::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageReq::uid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageReq.uid)
  return _internal_uid();
}
inline void TextChatMessageReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void TextChatMessageReq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMessageReq.uid)
}

// int32 touid = 2;
inline void TextChatMessageReq::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageReq::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageReq::touid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageReq.touid)
  return _internal_touid();
}
inline void TextChatMessageReq::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void TextChatMessageReq::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMessageReq.touid)
}

// repeated .message.TextChatData message = 3;
inline int TextChatMessageReq::_internal_message_size() const {
  return message_.size();
}
inline int TextChatMessageReq::message_size() const {
  return _internal_message_size();
}
inline void TextChatMessageReq::clear_message() {
  message_.Clear();
}
inline ::message::TextChatData* TextChatMessageReq::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:message.TextChatMessageReq.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
TextChatMessageReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:message.TextChatMessageReq.message)
  return &message_;
}
inline const ::message::TextChatData& TextChatMessageReq::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::message::TextChatData& TextChatMessageReq::message(int index) const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageReq.message)
  return _internal_message(index);
}
inline ::message::TextChatData* TextChatMessageReq::_internal_add_message() {
  return message_.Add();
}
inline ::message::TextChatData* TextChatMessageReq::add_message() {
  // @@protoc_insertion_point(field_add:message.TextChatMessageReq.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
TextChatMessageReq::message() const {
  // @@protoc_insertion_point(field_list:message.TextChatMessageReq.message)
  return message_;
}

// -------------------------------------------------------------------

// TextChatMessageRsp

// int32 error = 1;
inline void TextChatMessageRsp::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageRsp::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageRsp::error() const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageRsp.error)
  return _internal_error();
}
inline void TextChatMessageRsp::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void TextChatMessageRsp::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:message.TextChatMessageRsp.error)
}

// int32 uid = 2;
inline void TextChatMessageRsp::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageRsp::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageRsp::uid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageRsp.uid)
  return _internal_uid();
}
inline void TextChatMessageRsp::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void TextChatMessageRsp::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMessageRsp.uid)
}

// int32 touid = 3;
inline void TextChatMessageRsp::clear_touid() {
  touid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageRsp::_internal_touid() const {
  return touid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextChatMessageRsp::touid() const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageRsp.touid)
  return _internal_touid();
}
inline void TextChatMessageRsp::_internal_set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  touid_ = value;
}
inline void TextChatMessageRsp::set_touid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_touid(value);
  // @@protoc_insertion_point(field_set:message.TextChatMessageRsp.touid)
}

// repeated .message.TextChatData message = 4;
inline int TextChatMessageRsp::_internal_message_size() const {
  return message_.size();
}
inline int TextChatMessageRsp::message_size() const {
  return _internal_message_size();
}
inline void TextChatMessageRsp::clear_message() {
  message_.Clear();
}
inline ::message::TextChatData* TextChatMessageRsp::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:message.TextChatMessageRsp.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >*
TextChatMessageRsp::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:message.TextChatMessageRsp.message)
  return &message_;
}
inline const ::message::TextChatData& TextChatMessageRsp::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::message::TextChatData& TextChatMessageRsp::message(int index) const {
  // @@protoc_insertion_point(field_get:message.TextChatMessageRsp.message)
  return _internal_message(index);
}
inline ::message::TextChatData* TextChatMessageRsp::_internal_add_message() {
  return message_.Add();
}
inline ::message::TextChatData* TextChatMessageRsp::add_message() {
  // @@protoc_insertion_point(field_add:message.TextChatMessageRsp.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::TextChatData >&
TextChatMessageRsp::message() const {
  // @@protoc_insertion_point(field_list:message.TextChatMessageRsp.message)
  return message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
